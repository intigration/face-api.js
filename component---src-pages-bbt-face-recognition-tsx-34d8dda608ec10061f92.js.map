{"version":3,"sources":["webpack:///./src/facc/ComputeRefDescriptors.tsx","webpack:///./src/pages/bbt_face_recognition.tsx","webpack:///./src/components/ImageSelection.tsx","webpack:///./src/components/SelectableImage.tsx","webpack:///./face-api.js-react/facc/DetectFacesWithLandmarksWithDescriptors.tsx","webpack:///./src/components/DisplayMatches.tsx"],"names":["initRefDescriptors","props","Promise","all","refDataSources","map","label","url","faceapi","fetch","blob","bufferToImage","img","faceRecognitionNet","computeFaceDescriptor","descriptor","replace","refDescriptors","getBestMatch","queryDescriptor","ref","distance","reduce","best","curr","ComputeRefDescriptors","withAsyncRendering","REF_DATA_SOURCES","ALIGNED_FACE_IMAGES_BY_CLASS","srcsByClass","state","onTabIndexChanged","setState","inputImg","undefined","render","window","document","EXAMPLE_IMAGES","overlay","SelectionTypes","BOTH","maxWidth","MODELS_URI","FACE_DETECTORS","TinyFaceDetectorOptions","inputSize","detectorName","detectionOptions","renderFaceDetectorSelection","renderFaceDetectorControls","getFaceDetectionModelUri","fullFaceDescriptions","React","ImageSelection","items","selectedImage","onChange","e","target","value","item","Container","styled","div","Margin","SelectableImage","imageSrc","initialImageSrc","onChangeSelection","bind","onLoadFromDisk","file","files","reader","FileReader","onload","loadEvent","result","readAsDataURL","selectionType","imageStyle","SELECT","FILE","imgId","display","defaultProps","detectFacesWithLandmarksWithDescriptors","input","element","withFaceLandmarks","withFaceDescriptors","DetectFacesWithLandmarksWithDescriptors","DisplayMatches","withScore","boxesWithText","fd","bestMatch","text","BoxWithText","detection","box","children"],"mappings":"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","file":"component---src-pages-bbt-face-recognition-tsx-34d8dda608ec10061f92.js","sourcesContent":["import * as faceapi from 'face-api.js';\nimport { withAsyncRendering } from 'face-api.js-react';\n\nexport type RefDescriptor = {\n  label: string,\n  descriptor: Float32Array\n}\n\nexport type BestMatch = {\n  label: string,\n  distance: number\n}\n\nexport interface ComputeRefDescriptorsProps {\n  refDataSources: {\n    label: string,\n    url: string\n  }[]\n}\n\nexport interface ComputeRefDescriptorsState {\n  refDescriptors?: RefDescriptor[]\n  getBestMatch?: (queryDescriptor: Float32Array) => BestMatch\n}\n\nasync function initRefDescriptors(props: ComputeRefDescriptorsProps) {\n  const refDescriptors = await Promise.all(\n    props.refDataSources.map(async ({ label, url }) => {\n      const img = await faceapi.bufferToImage(await (await fetch(url)).blob())\n      const descriptor = await faceapi.nets.faceRecognitionNet.computeFaceDescriptor(img) as Float32Array\n      return {\n        label: label.replace('1.png', ''),\n        descriptor\n      }\n    })\n  )\n\n  const getBestMatch = (queryDescriptor: Float32Array) =>\n    refDescriptors.map(ref => ({\n      label: ref.label,\n      distance: faceapi.euclideanDistance(ref.descriptor, queryDescriptor)\n    }))\n      .reduce((best, curr) => curr.distance < best.distance ? curr : best)\n\n  return {\n    refDescriptors,\n    getBestMatch\n  }\n}\n\nexport const ComputeRefDescriptors = \n  withAsyncRendering<ComputeRefDescriptorsProps, ComputeRefDescriptorsState>(initRefDescriptors)\n","import { TinyFaceDetectorOptions } from 'face-api.js';\nimport { LoadModels, MediaElement } from 'face-api.js-react';\nimport * as React from 'react';\n\nimport {\n  DetectFacesWithLandmarksWithDescriptors,\n} from '../../face-api.js-react/facc/DetectFacesWithLandmarksWithDescriptors';\nimport { DisplayMatches } from '../components/DisplayMatches';\nimport { ModalLoader } from '../components/ModalLoader';\nimport { SelectableImage, SelectionTypes } from '../components/SelectableImage';\nimport {\n  ALIGNED_FACE_IMAGES_BY_CLASS,\n  EXAMPLE_IMAGES,\n  FACE_DETECTORS,\n  getFaceDetectionModelUri,\n  MODELS_URI,\n} from '../const';\nimport { ComputeRefDescriptors } from '../facc/ComputeRefDescriptors';\nimport { SelectFaceDetector } from '../facc/SelectFaceDetector';\nimport { Root } from '../Root';\n\nconst REF_DATA_SOURCES = ALIGNED_FACE_IMAGES_BY_CLASS.map(srcsByClass => srcsByClass[0])\n\ntype PageState = {\n  inputImg?: MediaElement\n  overlay?: HTMLCanvasElement\n}\n\nexport default class extends React.Component<{}, PageState> {\n\n  state: PageState = {\n  }\n\n  onTabIndexChanged = () => {\n    this.setState({ inputImg: undefined })\n  }\n\n  public render() {\n    if (!(typeof window !== 'undefined' && window.document) ){\n      return null\n    }\n\n    return(\n      <Root>\n        <SelectableImage\n          items={EXAMPLE_IMAGES}\n          initialImageSrc={EXAMPLE_IMAGES[0].url}\n          onLoaded={({ img: inputImg, overlay }) => this.setState({ inputImg, overlay })}\n          selectionType={SelectionTypes.BOTH}\n          imageStyle={{ maxWidth: 800 }}\n          imgId=\"img\"\n        />\n        <LoadModels\n          faceLandmarkModelUrl={MODELS_URI}\n          faceRecognitionModelUrl={MODELS_URI}\n          renderBusyComponent={() => <ModalLoader title={`Loading Models`} />}\n        >\n        {() =>\n          <ComputeRefDescriptors\n            refDataSources={REF_DATA_SOURCES}\n            renderBusyComponent={\n              () => <ModalLoader title=\"Computing Reference Descriptors\"/>\n            }\n          >\n          {({ getBestMatch }) =>\n            <SelectFaceDetector\n              initialFaceDetector={FACE_DETECTORS[0]}\n              initialTinyFaceDetectorOptions={new TinyFaceDetectorOptions({ inputSize: 512 })}\n            >\n            {(detectorName, detectionOptions, renderFaceDetectorSelection, renderFaceDetectorControls) =>\n              <LoadModels\n                {...getFaceDetectionModelUri(detectorName, MODELS_URI)}\n                renderBusyComponent={() => <ModalLoader title={`Loading ${detectorName} Model`} />}\n              >\n              {() =>\n                <div>\n                  { renderFaceDetectorSelection() }\n                  { renderFaceDetectorControls() }\n                  <DetectFacesWithLandmarksWithDescriptors\n                    input={this.state.inputImg}\n                    detectionOptions={detectionOptions}\n                  >\n                  {({ fullFaceDescriptions }) =>\n                    <DisplayMatches\n                      input={this.state.inputImg}\n                      fullFaceDescriptions={fullFaceDescriptions}\n                      overlay={this.state.overlay}\n                      getBestMatch={getBestMatch}\n                      withScore\n                    />\n                  }\n                  </DetectFacesWithLandmarksWithDescriptors>\n                </div>\n              }\n              </LoadModels>\n            }\n            </SelectFaceDetector>\n          }\n          </ComputeRefDescriptors>\n        }\n        </LoadModels>\n      </Root>\n    )\n  }\n}","import { FormControl, FormHelperText, Input, MenuItem, Select } from '@material-ui/core';\nimport * as React from 'react';\n\nexport type ImageSelectionItem = {\n  url: string\n  label: string\n}\n\ntype ImageSelectionProps = {\n  items: ImageSelectionItem[]\n  selectedImage: string\n  onChange: (value: string) => void\n}\n\nexport const ImageSelection = ({ items, selectedImage, onChange }: ImageSelectionProps) =>\n  <FormControl>\n    <Select\n      value={selectedImage}\n      onChange={e => onChange(e.target.value)}\n      input={<Input />}\n    >\n      {\n        items.map(item =>\n          <MenuItem\n            key={item.url}\n            value={item.url}\n          >\n            { item.label }\n          </MenuItem>\n        )\n      }\n    </Select>\n    <FormHelperText>Pick an image</FormHelperText>\n  </FormControl>","import * as Mui from '@material-ui/core';\nimport { MediaElement } from 'face-api.js-react';\nimport * as React from 'react';\nimport styled from 'styled-components';\n\nimport { ImageWithOverlay } from '../../face-api.js-react';\nimport { SideBySide } from '../styled/SideBySide';\nimport { ImageSelection, ImageSelectionItem } from './ImageSelection';\n\nconst Container = styled.div`\n  padding: 10px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`\n\nconst Margin = styled.div`\n  margin: 10px;\n`\n\n\nexport enum SelectionTypes {\n  SELECT = 'SELECT',\n  FILE = 'FILE',\n  BOTH = 'BOTH'\n}\n\nexport type SelectableImageProps = {\n  onLoaded: (refs: { img: MediaElement, overlay: HTMLCanvasElement}) => any\n  imgId: string\n  items?: ImageSelectionItem[]\n  initialImageSrc?: string\n  selectionType?: SelectionTypes\n  imageStyle?: React.CSSProperties\n}\n\nexport type SelectableImageState = {\n  imageSrc: string\n}\n\nexport class SelectableImage extends React.Component<SelectableImageProps, SelectableImageState> {\n  static defaultProps: Partial<SelectableImageProps> = {\n    selectionType: SelectionTypes.SELECT\n  }\n\n  constructor(props: SelectableImageProps) {\n    super(props)\n\n    this.state = {\n      imageSrc: props.initialImageSrc\n    }\n\n    this.onChangeSelection = this.onChangeSelection.bind(this)\n    this.onLoadFromDisk = this.onLoadFromDisk.bind(this)\n  }\n\n  onChangeSelection(imageSrc: string) {\n    this.setState({\n      imageSrc\n    })\n  }\n\n  onLoadFromDisk(e: any) {\n    const file = (e.target.files || [])[0]\n    if (!file) {\n      return\n    }\n\n    const reader = new FileReader()\n\n    reader.onload = (loadEvent: any) =>\n    this.setState({\n      imageSrc: loadEvent.target.result\n    })\n\n    reader.readAsDataURL(e.target.files[0])\n  }\n\n  render() {\n    const { selectionType } = this.props\n    return (\n      <Container>\n        <ImageWithOverlay\n          {...this.props}\n          imageSrc={this.state.imageSrc}\n          imageStyle={this.props.imageStyle}\n        />\n        <SideBySide>\n        {\n          (selectionType === SelectionTypes.SELECT || selectionType === SelectionTypes.BOTH)\n            &&\n            <Margin>\n              <ImageSelection\n                items={this.props.items}\n                selectedImage={this.state.imageSrc}\n                onChange={this.onChangeSelection}\n              />\n            </Margin>\n        }\n        {\n          (selectionType === SelectionTypes.FILE || selectionType === SelectionTypes.BOTH)\n            &&\n            <Margin>\n              <input\n                accept=\"image/*\"\n                id={this.props.imgId}\n                multiple\n                style={{ display: 'none' }}\n                onChange={this.onLoadFromDisk}\n                type=\"file\"\n              />\n              <label htmlFor={this.props.imgId}>\n                <Mui.Button variant=\"outlined\" component=\"span\">\n                  From Disk\n                </Mui.Button>\n              </label>\n            </Margin>\n        }\n        </SideBySide>\n      </Container>\n    )\n  }\n}","import * as faceapi from 'face-api.js';\n\nimport { withAsyncRendering } from '../hoc/withAsyncRendering';\nimport { MediaElement } from '../MediaElement';\nimport { FullFaceDescription, FaceDetectionOptions } from 'face-api.js';\n\nexport interface DetectFacesWithLandmarksWithDescriptorsProps {\n  detectionOptions: FaceDetectionOptions\n  input?: MediaElement\n}\n\nexport interface DetectFacesWithLandmarksWithDescriptorsState {\n  fullFaceDescriptions?: FullFaceDescription[]\n}\n\nasync function detectFacesWithLandmarksWithDescriptors(props: DetectFacesWithLandmarksWithDescriptorsProps) {\n\n  if (!props.input) {\n    return null\n  }\n\n  return {\n    fullFaceDescriptions: await faceapi.detectAllFaces(props.input.element, props.detectionOptions).withFaceLandmarks().withFaceDescriptors()\n  }\n}\n\nexport const DetectFacesWithLandmarksWithDescriptors =\n  withAsyncRendering<DetectFacesWithLandmarksWithDescriptorsProps, DetectFacesWithLandmarksWithDescriptorsState>(detectFacesWithLandmarksWithDescriptors)\n","import * as faceapi from 'face-api.js';\nimport * as React from 'react';\n\nimport { BestMatch } from '../facc/ComputeRefDescriptors';\nimport { BoxWithText } from 'face-api.js';\nimport { DisplayResults, ReactElement } from '../../face-api.js-react';\nimport { MediaElement } from '../../face-api.js-react/MediaElement';\n\n\nexport interface DisplayMatchesProps {\n  fullFaceDescriptions: faceapi.WithFaceDescriptor<faceapi.WithFaceLandmarks<faceapi.WithFaceDetection<{}>>>[]\n  input: MediaElement\n  overlay: HTMLCanvasElement\n  getBestMatch: (queryDescriptor: Float32Array) => BestMatch\n  withScore?: boolean\n  drawLandmarks?: boolean\n  children?: () => ReactElement\n}\n\nexport const DisplayMatches = (props: DisplayMatchesProps): any => {\n\n  const { input, fullFaceDescriptions, overlay, withScore, getBestMatch } = props\n\n  const boxesWithText = faceapi.resizeResults(fullFaceDescriptions, overlay)\n    .map(fd => {\n      const bestMatch = getBestMatch(fd.descriptor)\n      const text = `${bestMatch.distance < 0.6 ? bestMatch.label : 'unknown'} (${faceapi.round(bestMatch.distance)})`\n      return new BoxWithText(fd.detection.box, text)\n    })\n\n  return (\n    <DisplayResults\n      input={input}\n      results={boxesWithText}\n      overlay={overlay}\n      displayResultsOptions={{ withScore }}\n    >\n      { props.children }\n    </DisplayResults>\n  )\n}"],"sourceRoot":""}
{"version":3,"sources":["webpack:///./src/pages/face_recognition.tsx","webpack:///./src/components/ImageSelection.tsx","webpack:///./src/components/SelectableImage.tsx","webpack:///./face-api.js-react/facc/DetectFacesWithLandmarksWithDescriptors.tsx","webpack:///./src/components/DisplayMatches.tsx"],"names":["state","render","window","document","EXAMPLE_IMAGES","url","input1","img","overlay1","overlay","setState","SelectionTypes","BOTH","maxWidth","input2","overlay2","MODELS_URI","FACE_DETECTORS","TinyFaceDetectorOptions","inputSize","detectorName","detectionOptions","renderFaceDetectorSelection","renderFaceDetectorControls","getFaceDetectionModelUri","results1","fullFaceDescriptions","length","faceMatcher","faceapi","results2","labeledDescriptors","map","ld","idx","BoxWithText","detection","forSize","width","height","box","label","desc","findBestMatch","React","ImageSelection","items","selectedImage","onChange","e","target","value","item","Container","styled","div","Margin","SelectableImage","props","imageSrc","initialImageSrc","onChangeSelection","bind","onLoadFromDisk","file","files","reader","FileReader","onload","loadEvent","result","readAsDataURL","selectionType","imageStyle","SELECT","FILE","imgId","display","defaultProps","detectFacesWithLandmarksWithDescriptors","input","element","withFaceLandmarks","withFaceDescriptors","DetectFacesWithLandmarksWithDescriptors","withAsyncRendering","DisplayMatches","withScore","getBestMatch","boxesWithText","fd","bestMatch","descriptor","text","distance","children"],"mappings":"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","file":"component---src-pages-face-recognition-tsx-f2f829efeb3ac852698e.js","sourcesContent":["import * as faceapi from 'face-api.js';\nimport { TinyFaceDetectorOptions, BoxWithText } from 'face-api.js';\nimport { LoadModels } from 'face-api.js-react';\nimport { DisplayResults } from 'face-api.js-react/components/DisplayResults';\nimport * as React from 'react';\n\nimport {\n  DetectFacesWithLandmarksWithDescriptors,\n} from '../../face-api.js-react/facc/DetectFacesWithLandmarksWithDescriptors';\nimport { MediaElement } from '../../face-api.js-react/MediaElement';\nimport { DisplayMatches } from '../components/DisplayMatches';\nimport { ModalLoader } from '../components/ModalLoader';\nimport { SelectableImage, SelectionTypes } from '../components/SelectableImage';\nimport { EXAMPLE_IMAGES, FACE_DETECTORS, getFaceDetectionModelUri, MODELS_URI } from '../const';\nimport { SelectFaceDetector } from '../facc/SelectFaceDetector';\nimport { Root } from '../Root';\n\ntype PageState = {\n  input1?: MediaElement\n  overlay1?: HTMLCanvasElement\n  input2?: MediaElement\n  overlay2?: HTMLCanvasElement\n}\n\nexport default class extends React.Component<{}, PageState> {\n\n  state: PageState = {\n  }\n\n  public render() {\n    if (!(typeof window !== 'undefined' && window.document) ){\n      return null\n    }\n\n    return(\n      <Root>\n        <SelectableImage\n          items={EXAMPLE_IMAGES}\n          initialImageSrc={EXAMPLE_IMAGES[0].url}\n          onLoaded={({ img : input1, overlay: overlay1 }) => this.setState({ input1, overlay1 })}\n          selectionType={SelectionTypes.BOTH}\n          imageStyle={{ maxWidth: 500 }}\n          imgId=\"img1\"\n        />\n        <SelectableImage\n          items={EXAMPLE_IMAGES}\n          initialImageSrc={EXAMPLE_IMAGES[3].url}\n          onLoaded={({ img: input2, overlay: overlay2 }) => this.setState({ input2, overlay2 })}\n          selectionType={SelectionTypes.BOTH}\n          imageStyle={{ maxWidth: 500 }}\n          imgId=\"img2\"\n        />\n        <LoadModels\n          faceLandmarkModelUrl={MODELS_URI}\n          faceRecognitionModelUrl={MODELS_URI}\n          renderBusyComponent={() => <ModalLoader title={`Loading Models`} />}\n        >\n        {() =>\n          <SelectFaceDetector\n            initialFaceDetector={FACE_DETECTORS[0]}\n            initialTinyFaceDetectorOptions={new TinyFaceDetectorOptions({ inputSize: 512 })}\n          >\n          {(detectorName, detectionOptions, renderFaceDetectorSelection, renderFaceDetectorControls) =>\n            <LoadModels\n              {...getFaceDetectionModelUri(detectorName, MODELS_URI)}\n              renderBusyComponent={() => <ModalLoader title={`Loading ${detectorName} Model`} />}\n            >\n            {() =>\n              <div>\n                { renderFaceDetectorSelection() }\n                { renderFaceDetectorControls() }\n                <DetectFacesWithLandmarksWithDescriptors\n                  input={this.state.input1}\n                  detectionOptions={detectionOptions}\n                >\n                {({ fullFaceDescriptions: results1 }) => {\n                  if (!results1.length) {\n                    return null\n                  }\n\n                  const faceMatcher = new faceapi.FaceMatcher(results1)\n                  const { overlay1 } = this.state\n\n                  return (\n                    <DetectFacesWithLandmarksWithDescriptors\n                      input={this.state.input2}\n                      detectionOptions={detectionOptions}\n                    >\n                    {({ fullFaceDescriptions: results2 }) =>\n                      <span>\n                        <DisplayResults\n                          input={this.state.input1}\n                          overlay={overlay1}\n                          results={\n                            faceMatcher.labeledDescriptors.map((ld, idx) =>\n                              new BoxWithText(\n                                results1[idx].detection.forSize(overlay1.width, overlay1.height).box,\n                                ld.label\n                              )\n                            )\n                          }\n                        />\n                        <DisplayMatches\n                          input={this.state.input2}\n                          fullFaceDescriptions={results2}\n                          overlay={this.state.overlay2}\n                          getBestMatch={(desc) => faceMatcher.findBestMatch(desc)}\n                          withScore\n                        />\n                      </span>\n                    }\n                    </DetectFacesWithLandmarksWithDescriptors>\n                  )\n                }}\n                </DetectFacesWithLandmarksWithDescriptors>\n              </div>\n            }\n            </LoadModels>\n          }\n          </SelectFaceDetector>\n        }\n        </LoadModels>\n      </Root>\n    )\n  }\n}","import { FormControl, FormHelperText, Input, MenuItem, Select } from '@material-ui/core';\nimport * as React from 'react';\n\nexport type ImageSelectionItem = {\n  url: string\n  label: string\n}\n\ntype ImageSelectionProps = {\n  items: ImageSelectionItem[]\n  selectedImage: string\n  onChange: (value: string) => void\n}\n\nexport const ImageSelection = ({ items, selectedImage, onChange }: ImageSelectionProps) =>\n  <FormControl>\n    <Select\n      value={selectedImage}\n      onChange={e => onChange(e.target.value)}\n      input={<Input />}\n    >\n      {\n        items.map(item =>\n          <MenuItem\n            key={item.url}\n            value={item.url}\n          >\n            { item.label }\n          </MenuItem>\n        )\n      }\n    </Select>\n    <FormHelperText>Pick an image</FormHelperText>\n  </FormControl>","import * as Mui from '@material-ui/core';\nimport { MediaElement } from 'face-api.js-react';\nimport * as React from 'react';\nimport styled from 'styled-components';\n\nimport { ImageWithOverlay } from '../../face-api.js-react';\nimport { SideBySide } from '../styled/SideBySide';\nimport { ImageSelection, ImageSelectionItem } from './ImageSelection';\n\nconst Container = styled.div`\n  padding: 10px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`\n\nconst Margin = styled.div`\n  margin: 10px;\n`\n\n\nexport enum SelectionTypes {\n  SELECT = 'SELECT',\n  FILE = 'FILE',\n  BOTH = 'BOTH'\n}\n\nexport type SelectableImageProps = {\n  onLoaded: (refs: { img: MediaElement, overlay: HTMLCanvasElement}) => any\n  imgId: string\n  items?: ImageSelectionItem[]\n  initialImageSrc?: string\n  selectionType?: SelectionTypes\n  imageStyle?: React.CSSProperties\n}\n\nexport type SelectableImageState = {\n  imageSrc: string\n}\n\nexport class SelectableImage extends React.Component<SelectableImageProps, SelectableImageState> {\n  static defaultProps: Partial<SelectableImageProps> = {\n    selectionType: SelectionTypes.SELECT\n  }\n\n  constructor(props: SelectableImageProps) {\n    super(props)\n\n    this.state = {\n      imageSrc: props.initialImageSrc\n    }\n\n    this.onChangeSelection = this.onChangeSelection.bind(this)\n    this.onLoadFromDisk = this.onLoadFromDisk.bind(this)\n  }\n\n  onChangeSelection(imageSrc: string) {\n    this.setState({\n      imageSrc\n    })\n  }\n\n  onLoadFromDisk(e: any) {\n    const file = (e.target.files || [])[0]\n    if (!file) {\n      return\n    }\n\n    const reader = new FileReader()\n\n    reader.onload = (loadEvent: any) =>\n    this.setState({\n      imageSrc: loadEvent.target.result\n    })\n\n    reader.readAsDataURL(e.target.files[0])\n  }\n\n  render() {\n    const { selectionType } = this.props\n    return (\n      <Container>\n        <ImageWithOverlay\n          {...this.props}\n          imageSrc={this.state.imageSrc}\n          imageStyle={this.props.imageStyle}\n        />\n        <SideBySide>\n        {\n          (selectionType === SelectionTypes.SELECT || selectionType === SelectionTypes.BOTH)\n            &&\n            <Margin>\n              <ImageSelection\n                items={this.props.items}\n                selectedImage={this.state.imageSrc}\n                onChange={this.onChangeSelection}\n              />\n            </Margin>\n        }\n        {\n          (selectionType === SelectionTypes.FILE || selectionType === SelectionTypes.BOTH)\n            &&\n            <Margin>\n              <input\n                accept=\"image/*\"\n                id={this.props.imgId}\n                multiple\n                style={{ display: 'none' }}\n                onChange={this.onLoadFromDisk}\n                type=\"file\"\n              />\n              <label htmlFor={this.props.imgId}>\n                <Mui.Button variant=\"outlined\" component=\"span\">\n                  From Disk\n                </Mui.Button>\n              </label>\n            </Margin>\n        }\n        </SideBySide>\n      </Container>\n    )\n  }\n}","import * as faceapi from 'face-api.js';\n\nimport { withAsyncRendering } from '../hoc/withAsyncRendering';\nimport { MediaElement } from '../MediaElement';\nimport { FullFaceDescription, FaceDetectionOptions } from 'face-api.js';\n\nexport interface DetectFacesWithLandmarksWithDescriptorsProps {\n  detectionOptions: FaceDetectionOptions\n  input?: MediaElement\n}\n\nexport interface DetectFacesWithLandmarksWithDescriptorsState {\n  fullFaceDescriptions?: FullFaceDescription[]\n}\n\nasync function detectFacesWithLandmarksWithDescriptors(props: DetectFacesWithLandmarksWithDescriptorsProps) {\n\n  if (!props.input) {\n    return null\n  }\n\n  return {\n    fullFaceDescriptions: await faceapi.detectAllFaces(props.input.element, props.detectionOptions).withFaceLandmarks().withFaceDescriptors()\n  }\n}\n\nexport const DetectFacesWithLandmarksWithDescriptors =\n  withAsyncRendering<DetectFacesWithLandmarksWithDescriptorsProps, DetectFacesWithLandmarksWithDescriptorsState>(detectFacesWithLandmarksWithDescriptors)\n","import * as faceapi from 'face-api.js';\nimport * as React from 'react';\n\nimport { BestMatch } from '../facc/ComputeRefDescriptors';\nimport { BoxWithText } from 'face-api.js';\nimport { DisplayResults, ReactElement } from '../../face-api.js-react';\nimport { MediaElement } from '../../face-api.js-react/MediaElement';\n\n\nexport interface DisplayMatchesProps {\n  fullFaceDescriptions: faceapi.WithFaceDescriptor<faceapi.WithFaceLandmarks<faceapi.WithFaceDetection<{}>>>[]\n  input: MediaElement\n  overlay: HTMLCanvasElement\n  getBestMatch: (queryDescriptor: Float32Array) => BestMatch\n  withScore?: boolean\n  drawLandmarks?: boolean\n  children?: () => ReactElement\n}\n\nexport const DisplayMatches = (props: DisplayMatchesProps): any => {\n\n  const { input, fullFaceDescriptions, overlay, withScore, getBestMatch } = props\n\n  const boxesWithText = faceapi.resizeResults(fullFaceDescriptions, overlay)\n    .map(fd => {\n      const bestMatch = getBestMatch(fd.descriptor)\n      const text = `${bestMatch.distance < 0.6 ? bestMatch.label : 'unknown'} (${faceapi.round(bestMatch.distance)})`\n      return new BoxWithText(fd.detection.box, text)\n    })\n\n  return (\n    <DisplayResults\n      input={input}\n      results={boxesWithText}\n      overlay={overlay}\n      displayResultsOptions={{ withScore }}\n    >\n      { props.children }\n    </DisplayResults>\n  )\n}"],"sourceRoot":""}